// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: game.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DungeonService_Login_FullMethodName          = "/game.DungeonService/Login"
	DungeonService_Logout_FullMethodName         = "/game.DungeonService/Logout"
	DungeonService_GetCurrentRoom_FullMethodName = "/game.DungeonService/GetCurrentRoom"
	DungeonService_Move_FullMethodName           = "/game.DungeonService/Move"
	DungeonService_GetDungeonData_FullMethodName = "/game.DungeonService/GetDungeonData"
)

// DungeonServiceClient is the client API for DungeonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Dungeon Service
type DungeonServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	GetCurrentRoom(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*RoomResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*RoomResponse, error)
	GetDungeonData(ctx context.Context, in *GetDungeonDataRequest, opts ...grpc.CallOption) (*GetDungeonDataResponse, error)
}

type dungeonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDungeonServiceClient(cc grpc.ClientConnInterface) DungeonServiceClient {
	return &dungeonServiceClient{cc}
}

func (c *dungeonServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, DungeonService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dungeonServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, DungeonService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dungeonServiceClient) GetCurrentRoom(ctx context.Context, in *PlayerRequest, opts ...grpc.CallOption) (*RoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, DungeonService_GetCurrentRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dungeonServiceClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*RoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomResponse)
	err := c.cc.Invoke(ctx, DungeonService_Move_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dungeonServiceClient) GetDungeonData(ctx context.Context, in *GetDungeonDataRequest, opts ...grpc.CallOption) (*GetDungeonDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDungeonDataResponse)
	err := c.cc.Invoke(ctx, DungeonService_GetDungeonData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DungeonServiceServer is the server API for DungeonService service.
// All implementations must embed UnimplementedDungeonServiceServer
// for forward compatibility.
//
// Dungeon Service
type DungeonServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	GetCurrentRoom(context.Context, *PlayerRequest) (*RoomResponse, error)
	Move(context.Context, *MoveRequest) (*RoomResponse, error)
	GetDungeonData(context.Context, *GetDungeonDataRequest) (*GetDungeonDataResponse, error)
	mustEmbedUnimplementedDungeonServiceServer()
}

// UnimplementedDungeonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDungeonServiceServer struct{}

func (UnimplementedDungeonServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDungeonServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedDungeonServiceServer) GetCurrentRoom(context.Context, *PlayerRequest) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRoom not implemented")
}
func (UnimplementedDungeonServiceServer) Move(context.Context, *MoveRequest) (*RoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedDungeonServiceServer) GetDungeonData(context.Context, *GetDungeonDataRequest) (*GetDungeonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDungeonData not implemented")
}
func (UnimplementedDungeonServiceServer) mustEmbedUnimplementedDungeonServiceServer() {}
func (UnimplementedDungeonServiceServer) testEmbeddedByValue()                        {}

// UnsafeDungeonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DungeonServiceServer will
// result in compilation errors.
type UnsafeDungeonServiceServer interface {
	mustEmbedUnimplementedDungeonServiceServer()
}

func RegisterDungeonServiceServer(s grpc.ServiceRegistrar, srv DungeonServiceServer) {
	// If the following call pancis, it indicates UnimplementedDungeonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DungeonService_ServiceDesc, srv)
}

func _DungeonService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DungeonServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DungeonService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DungeonServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DungeonService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DungeonServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DungeonService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DungeonServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DungeonService_GetCurrentRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DungeonServiceServer).GetCurrentRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DungeonService_GetCurrentRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DungeonServiceServer).GetCurrentRoom(ctx, req.(*PlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DungeonService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DungeonServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DungeonService_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DungeonServiceServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DungeonService_GetDungeonData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDungeonDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DungeonServiceServer).GetDungeonData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DungeonService_GetDungeonData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DungeonServiceServer).GetDungeonData(ctx, req.(*GetDungeonDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DungeonService_ServiceDesc is the grpc.ServiceDesc for DungeonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DungeonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.DungeonService",
	HandlerType: (*DungeonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _DungeonService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _DungeonService_Logout_Handler,
		},
		{
			MethodName: "GetCurrentRoom",
			Handler:    _DungeonService_GetCurrentRoom_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _DungeonService_Move_Handler,
		},
		{
			MethodName: "GetDungeonData",
			Handler:    _DungeonService_GetDungeonData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}
